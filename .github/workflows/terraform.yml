name: Terraform Analysis, Plan, and Reporting with AWS OIDC

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: write

jobs:
  analyze:
    name: Analyze Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ">= 1.11.4"

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: TFlint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: "v0.56.0"
      - name: Run TFlint
        id: tflint
        run: tflint -f compact --report=tflint_report.txt
      - name: Upload TFlint Report
        uses: actions/upload-artifact@v3
        with:
          name: tflint-report-${{ github.run_id }}
          path: tflint_report.txt
          retention-days: 1

      - name: Checkov
        uses: bridgecrewio/checkov-action@v12.1347.0
        id: checkov
        with:
          directory: .
          framework: terraform
          soft_fail: true # Allow the workflow to continue even if Checkov finds issues
          output_format: sarif
          output_path: checkov_report.sarif
      - name: Upload Checkov Report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov_report.sarif

  plan_and_docs:
    name: Plan and Generate Docs
    runs-on: ubuntu-latest
    outputs:
      plan_artifact_name: ${{ steps.upload_plan.outputs.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }} # Checkout the specific branch for PRs

      - name: Configure AWS Credentials (OIDC)
        if: ${{ env.AWS_REGION != '' && env.AWS_ROLE_ARN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ">= 1.11.4"

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -lock=false -out=terraform.plan
        continue-on-error: true # Allow the workflow to continue even if the plan fails
      - name: Upload Terraform Plan Artifact
        if: steps.plan.outcome == 'success'
        id: upload_plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-${{ github.run_id }}
          path: terraform.plan
          retention-days: 1
      - name: Terraform Plan Report
        if: steps.plan.outcome == 'failure'
        run: |
          echo "Terraform Plan failed:"
          echo "${{ steps.plan.outputs.stdout }}"
      - name: Terraform Docs
        uses: terraform-docs/gh-action@v1.0.0
        with:
          args: --config .terraform-docs.yml .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Terraform Docs Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform-docs-${{ github.run_id }}
          path: README.md
          retention-days: 1

  report_to_branch:
    name: Report to New Branch
    runs-on: ubuntu-latest
    needs: [analyze, plan_and_docs]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }} # Checkout the specific branch for PRs
          fetch-depth: 0 # Required to create a new branch

      - name: Create Report Branch
        id: create_branch
        run: |
          REPORT_BRANCH="terraform-reports-${{ github.run_id }}"
          echo "REPORT_BRANCH=$REPORT_BRANCH" >> "$GITHUB_ENV"
          git checkout -b "$REPORT_BRANCH"

      - name: Download TFlint Report
        uses: actions/download-artifact@v3
        with:
          name: tflint-report-${{ github.run_id }}
          path: reports

      - name: Download Checkov Report (SARIF)
        uses: actions/download-artifact@v3
        with:
          name: checkov-report-${{ github.run_id }} # The default artifact name for SARIF upload
          path: reports

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.plan_and_docs.outputs.plan_artifact_name }}
          path: reports

      - name: Download Terraform Docs
        uses: actions/download-artifact@v3
        with:
          name: terraform-docs-${{ github.run_id }}
          path: reports

      - name: Commit and Push Reports
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          mkdir -p terraform_plan
          mv reports/terraform.plan terraform_plan/terraform.plan # Move plan to a dedicated folder
          mv reports/* .
          rm -rf reports
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Add Terraform analysis reports (Run ${{ github.run_id }})"
            git push origin "${{ env.REPORT_BRANCH }}" -f # Force push to the new branch

  apply:
    name: Apply Terraform
    runs-on: ubuntu-latest
    needs: [report_to_branch]
    environment:
      name: production # Or your target environment
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ">= 1.11.4"

      - name: Configure AWS Credentials (OIDC)
        if: ${{ secrets.AWS_REGION != '' && secrets.AWS_ROLE_ARN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}-apply

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.plan_and_docs.outputs.plan_artifact_name }}
          path: ${{ github.workspace }}

      - name: Terraform Init
        run: terraform init -lock=false

      - name: Terraform Apply
        run: terraform apply -auto-approve -lock=false terraform.plan
